    public class Weapon
    {
        private readonly int _damage;
        private readonly int _bulletsPerShot;
        private int _bullets;
    
        public Weapon(int damage, int bullets, int bulletsPerShot)
        {
            if (damage <= 0)
                throw new ArgumentOutOfRangeException(nameof(damage), "Урон должен быть больше 0.");
    
            if (bullets < 0)
                throw new ArgumentException("Пули не могут быть отрицательными.", nameof(bullets));
    
            if (bulletsPerShot <= 0)
                throw new ArgumentOutOfRangeException(nameof(bulletsPerShot), "Число пуль за выстрел должно быть больше 0.");
    
            _damage = damage;
            _bullets = bullets;
            _bulletsPerShot = bulletsPerShot;
        }
    
        public bool HasBullets => _bullets >= _bulletsPerShot;
    
        public void Fire(Player player)
        {
            if (player == null) 
                throw new ArgumentNullException(nameof(player));
    
            if (!HasBullets)
                throw new InvalidOperationException("Не осталось пуль для выстрела.");
    
            player.TakeDamage(_damage);
            _bullets -= _bulletsPerShot;
        }
    }
    
    public class Player
    {
        private int _health;
    
        public Player(int health)
        {
            if (health <= 0)
                throw new ArgumentOutOfRangeException(nameof(health), "Здоровье должно быть больше 0.");
    
            _health = health;
        }
    
        public void TakeDamage(int amount)
        {
            if (amount <= 0)
                throw new ArgumentOutOfRangeException(nameof(amount), "Сумма урона должна быть больше 0.");
    
            _health = Math.Max(_health - amount, 0);
        }
    }
    
    public class Bot
    {
        private readonly Weapon _weapon;
    
        public Bot(Weapon weapon)
        {
            _weapon = weapon ?? throw new ArgumentNullException(nameof(weapon));
        }
    
        public void OnSeePlayer(Player player)
        {
            if (player == null)
                throw new ArgumentNullException(nameof(player));
    
            if (_weapon.HasBullets)
                _weapon.Fire(player);
        }
    }
